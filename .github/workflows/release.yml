name: Release

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main
      - master
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  # Only run if CI passed or this is a tag push
  check:
    name: Check CI Status
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    steps:
      - name: CI passed or tag push
        run: echo "Proceeding with release"

  test:
    name: Run Tests
    needs: check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run tests
        run: go test -v ./...
        continue-on-error: false

  build:
    name: Build Multi-Platform Binaries
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            output: boba-linux-amd64
          - goos: linux
            goarch: arm64
            output: boba-linux-arm64
          - goos: darwin
            goarch: amd64
            output: boba-darwin-amd64
          - goos: darwin
            goarch: arm64
            output: boba-darwin-arm64
          - goos: windows
            goarch: amd64
            output: boba-windows-amd64.exe
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.GitCommit=${{ github.sha }}" -o ${{ matrix.output }} .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output }}
          path: ${{ matrix.output }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          find ./artifacts -type f -exec mv {} ./release/ \;
          chmod +x release/boba-*
          cd release
          for file in boba-*; do
            if [[ "$file" != *.exe ]]; then
              tar -czf "${file}.tar.gz" "$file"
              rm "$file"
            else
              zip "${file%.exe}.zip" "$file"
              rm "$file"
            fi
          done

      - name: Generate version tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=v0.0.0-dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # For tagged releases, get commits since last tag
            PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
            if [ -z "$PREVIOUS_TAG" ]; then
              COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
            else
              COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
            fi
          else
            # For branch releases, get last 10 commits
            COMMITS=$(git log -10 --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          echo "$COMMITS" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Linux (amd64)" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/boba-linux-amd64.tar.gz" >> release_notes.md
          echo "tar -xzf boba-linux-amd64.tar.gz" >> release_notes.md
          echo "sudo mv boba-linux-amd64 /usr/local/bin/boba" >> release_notes.md
          echo "chmod +x /usr/local/bin/boba" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "### macOS (Apple Silicon)" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/boba-darwin-arm64.tar.gz" >> release_notes.md
          echo "tar -xzf boba-darwin-arm64.tar.gz" >> release_notes.md
          echo "sudo mv boba-darwin-arm64 /usr/local/bin/boba" >> release_notes.md
          echo "chmod +x /usr/local/bin/boba" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "### Windows" >> release_notes.md
          echo "Download \`boba-windows-amd64.zip\`, extract it, and add the directory to your PATH." >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body_path: release_notes.md
          files: release/*
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
